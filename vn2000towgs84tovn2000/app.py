import streamlit as st
st.set_page_config(page_title="VN2000 ‚áÑ WGS84 Converter", layout="centered")

import pandas as pd
from functions import vn2000_to_wgs84_baibao, wgs84_to_vn2000_baibao

def parse_coordinates(text, group=3):
    """Chia token space/tab/newline th√†nh c√°c nh√≥m s·ªë float size=group."""
    tokens = text.replace('\t',' ').replace('\n',' ').split()
    coords, i = [], 0
    while i + group <= len(tokens):
        chunk = tokens[i:i+group]
        try:
            vals = list(map(float, chunk))
            coords.append(vals)
            i += group
        except ValueError:
            i += 1
    return coords

def render_map(df):
    """Hi·ªÉn th·ªã DataFrame c√≥ 2 c·ªôt latitude/longitude l√™n b·∫£n ƒë·ªì Streamlit."""
    if not df.empty and "Vƒ© ƒë·ªô (Lat)" in df.columns and "Kinh ƒë·ªô (Lon)" in df.columns:
        df_map = df.rename(columns={"Vƒ© ƒë·ªô (Lat)": "latitude", "Kinh ƒë·ªô (Lon)": "longitude"})
        st.map(df_map)
    else:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì.")

st.title("VN2000 ‚áÑ WGS84 Converter")

tab1, tab2 = st.tabs(["‚û°Ô∏è VN2000 ‚Üí WGS84", "‚¨ÖÔ∏è WGS84 ‚Üí VN2000"])

with tab1:
    st.markdown("#### üî¢ Nh·∫≠p t·ªça ƒë·ªô VN2000 (X Y Z ‚Äì space/tab/newline):")
    coords_input = st.text_area("", height=150, key="vn2000_in")
    lon0 = st.number_input("üåê Kinh tuy·∫øn tr·ª•c (¬∞)", value=106.25, format="%.4f", key="lon0_vn")
    if st.button("üîÅ Chuy·ªÉn WGS84"):
        parsed = parse_coordinates(coords_input, group=3)
        results = []
        for x, y, z in parsed:
            lat, lon, h = vn2000_to_wgs84_baibao(x, y, z, lon0)
            results.append((lat, lon, h))
        if results:
            df = pd.DataFrame(results, columns=["Vƒ© ƒë·ªô (Lat)", "Kinh ƒë·ªô (Lon)", "H (m)"])
            st.session_state.df = df
            st.dataframe(df)
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá (c·∫ßn 3 s·ªë m·ªói b·ªô).")

with tab2:
    st.markdown("#### üî¢ Nh·∫≠p t·ªça ƒë·ªô WGS84 (Lat Lon H ‚Äì space/tab/newline):")
    coords_input = st.text_area("", height=150, key="wgs84_in")
    lon0 = st.number_input("üåê Kinh tuy·∫øn tr·ª•c (¬∞)", value=106.25, format="%.4f", key="lon0_wg")
    if st.button("üîÅ Chuy·ªÉn VN2000"):
        parsed = parse_coordinates(coords_input, group=3)
        results = []
        for lat, lon, h in parsed:
            x, y, h_vn = wgs84_to_vn2000_baibao(lat, lon, h, lon0)
            results.append((x, y, h_vn))
        if results:
            df = pd.DataFrame(results, columns=["X (m)", "Y (m)", "h (m)"])
            st.session_state.df = df
            st.dataframe(df)
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá (c·∫ßn 3 s·ªë m·ªói b·ªô).")

if "df" in st.session_state:
    render_map(st.session_state.df)

st.markdown("---")
st.markdown(
    "üîç **Ngu·ªìn c√¥ng th·ª©c**: B√†i b√°o khoa h·ªçc: **C√îNG T√ÅC T√çNH CHUY·ªÇN T·ªåA ƒê·ªò TRONG C√îNG NGH·ªÜ M√ÅY BAY KH√îNG NG∆Ø·ªúI L√ÅI C√ì ƒê·ªäNH V·ªä T√ÇM CH·ª§P CH√çNH X√ÅC**  \n"
    "T√°c gi·∫£: Tr·∫ßn Trung Anh¬π, Qu√°ch M·∫°nh Tu·∫•n¬≤  \n"
    "¬π Tr∆∞·ªùng ƒê·∫°i h·ªçc M·ªè - ƒê·ªãa ch·∫•t  \n"
    "¬≤ C√¥ng ty CP X√¢y d·ª±ng v√† Th∆∞∆°ng m·∫°i QT Mi·ªÅn B·∫Øc  \n"
    "_H·ªôi ngh·ªã Qu·ªëc Gia V·ªÅ C√¥ng Ngh·ªá ƒê·ªãa Kh√¥ng Gian, 2021_"
)
